-- Criar esquema e usar
CREATE SCHEMA IF NOT EXISTS INOVATECH;
USE INOVATECH;

-- Tabela CLIENTES
CREATE TABLE IF NOT EXISTS CLIENTES(
    ID_CLIENTE INT PRIMARY KEY AUTO_INCREMENT,
    NOME_CLIENTE VARCHAR(100) NOT NULL,
    CPF_CLIENTE VARCHAR(20) NOT NULL,
    TELEFONE_CLIENTE VARCHAR(13) NOT NULL,
    DATANASC_CLIENTE DATE NOT NULL,
    STATUSFIDELIDADE_CLIENTE VARCHAR(100) NOT NULL,
    CEP_CLIENTE VARCHAR(10) NOT NULL,
    RUA_CLIENTE VARCHAR(50) NOT NULL,
    NUMCASA_CLIENTE VARCHAR(5) NOT NULL,
    BAIRRO_CLIENTE VARCHAR(40) NOT NULL,
    UF_CLIENTE CHAR(2) NOT NULL
);

-- Comandos DDL CLIENTES
CREATE INDEX idx_uf_cliente ON CLIENTES (UF_CLIENTE);
CREATE VIEW vista_clientes AS SELECT ID_CLIENTE, NOME_CLIENTE, CPF_CLIENTE FROM CLIENTES;
ALTER TABLE CLIENTES ADD status VARCHAR(50);
ALTER TABLE CLIENTES MODIFY COLUMN status VARCHAR(70);
ALTER TABLE CLIENTES CHANGE COLUMN status status_completo VARCHAR(70);
ALTER TABLE CLIENTES ADD INDEX idx_status (status_completo);
DROP INDEX idx_status ON CLIENTES;
DROP VIEW vista_clientes;
TRUNCATE TABLE CLIENTES;
RENAME TABLE CLIENTES TO CLIENTES_ANTIGOS;
RENAME TABLE CLIENTES_ANTIGOS TO CLIENTES;
ALTER TABLE CLIENTES COMMENT = 'Tabela de clientes';
ALTER TABLE CLIENTES MODIFY status_completo VARCHAR(70) COMMENT 'Status do cliente';
ALTER TABLE CLIENTES DROP COLUMN status_completo;

-- Tabela PRODUTOS
CREATE TABLE IF NOT EXISTS PRODUTOS(
    ID_PRODUTO INT PRIMARY KEY AUTO_INCREMENT,
    CATEGORIA_PRODUTO VARCHAR(45) NOT NULL,
    QUANTIDADEESTOQUE_PRODUTO INT NOT NULL,
    PRECO_PRODUTO DECIMAL(10, 2) NOT NULL
);

-- Comandos DDL PRODUTOS
CREATE INDEX idx_categoria_produto ON PRODUTOS (CATEGORIA_PRODUTO);
CREATE VIEW vista_produtos AS SELECT ID_PRODUTO, CATEGORIA_PRODUTO, PRECO_PRODUTO FROM PRODUTOS;
ALTER TABLE PRODUTOS ADD status VARCHAR(50);
ALTER TABLE PRODUTOS MODIFY COLUMN status VARCHAR(70);
ALTER TABLE PRODUTOS CHANGE COLUMN status status_completo VARCHAR(70);
ALTER TABLE PRODUTOS ADD INDEX idx_status (status_completo);
DROP INDEX idx_status ON PRODUTOS;
DROP VIEW vista_produtos;
TRUNCATE TABLE PRODUTOS;
RENAME TABLE PRODUTOS TO PRODUTOS_ANTIGOS;
RENAME TABLE PRODUTOS_ANTIGOS TO PRODUTOS;
ALTER TABLE PRODUTOS COMMENT = 'Tabela de produtos';
ALTER TABLE PRODUTOS MODIFY status_completo VARCHAR(70) COMMENT 'Status do produto';
ALTER TABLE PRODUTOS DROP COLUMN status_completo;

-- Tabela FORNECEDORES
CREATE TABLE IF NOT EXISTS FORNECEDORES(
    ID_FORNECEDOR INT PRIMARY KEY AUTO_INCREMENT,
    NOME_FORNECEDOR VARCHAR(100) NOT NULL,
    TELEFONE_FORNECEDOR VARCHAR(13) NOT NULL,
    CPF_FORNECEDOR VARCHAR(20) NOT NULL,
    EMAIL_FORNECEDOR VARCHAR(50) NOT NULL
);

-- Comandos DDL FORNECEDORES
CREATE INDEX idx_telefone_fornecedor ON FORNECEDORES (TELEFONE_FORNECEDOR);
CREATE VIEW vista_fornecedores AS SELECT ID_FORNECEDOR, NOME_FORNECEDOR, CPF_FORNECEDOR FROM FORNECEDORES;
ALTER TABLE FORNECEDORES ADD status VARCHAR(50);
ALTER TABLE FORNECEDORES MODIFY COLUMN status VARCHAR(70);
ALTER TABLE FORNECEDORES CHANGE COLUMN status status_completo VARCHAR(70);
ALTER TABLE FORNECEDORES ADD INDEX idx_status (status_completo);
DROP INDEX idx_status ON FORNECEDORES;
DROP VIEW vista_fornecedores;
TRUNCATE TABLE FORNECEDORES;
RENAME TABLE FORNECEDORES TO FORNECEDORES_ANTIGOS;
RENAME TABLE FORNECEDORES_ANTIGOS TO FORNECEDORES;
ALTER TABLE FORNECEDORES COMMENT = 'Tabela de fornecedores';
ALTER TABLE FORNECEDORES MODIFY status_completo VARCHAR(70) COMMENT 'Status do fornecedor';
ALTER TABLE FORNECEDORES DROP COLUMN status_completo;

-- Tabela VENDAS
CREATE TABLE IF NOT EXISTS VENDAS(
    ID_VENDA INT PRIMARY KEY AUTO_INCREMENT,
    VALOR_VENDA DECIMAL(10, 2) NOT NULL,
    ID_CLIENTE INT,
    CONSTRAINT FK_ID_CLIENTE FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTES(ID_CLIENTE) ON DELETE CASCADE
);

-- Comandos DDL VENDAS
CREATE INDEX idx_id_cliente ON VENDAS (ID_CLIENTE);
CREATE VIEW vista_vendas AS SELECT ID_VENDA, VALOR_VENDA, ID_CLIENTE FROM VENDAS;
ALTER TABLE VENDAS ADD status VARCHAR(50);
ALTER TABLE VENDAS MODIFY COLUMN status VARCHAR(70);
ALTER TABLE VENDAS CHANGE COLUMN status status_completo VARCHAR(70);
ALTER TABLE VENDAS ADD INDEX idx_status (status_completo);
DROP INDEX idx_status ON VENDAS;
DROP VIEW vista_vendas;
TRUNCATE TABLE VENDAS;
RENAME TABLE VENDAS TO VENDAS_ANTIGAS;
RENAME TABLE VENDAS_ANTIGAS TO VENDAS;
ALTER TABLE VENDAS COMMENT = 'Tabela de vendas';
ALTER TABLE VENDAS MODIFY status_completo VARCHAR(70) COMMENT 'Status da venda';
ALTER TABLE VENDAS DROP COLUMN status_completo;

-- Tabela PAGAMENTOS
CREATE TABLE IF NOT EXISTS PAGAMENTOS(
    FORMA_PAGAMENTO VARCHAR(30) NOT NULL,
    DATA_PAGAMENTO DATE NOT NULL,
    VALOR_PAGAMENTO DECIMAL(10, 2) NOT NULL,
    STATUS_PAGAMENTO VARCHAR(30) NOT NULL,
    ID_VENDA INT,
    PRIMARY KEY(ID_VENDA, DATA_PAGAMENTO),
    CONSTRAINT FK_ID_VENDA FOREIGN KEY (ID_VENDA) REFERENCES VENDAS(ID_VENDA) ON DELETE CASCADE
);

-- Comandos DDL PAGAMENTOS
CREATE INDEX idx_forma_pagamento ON PAGAMENTOS (FORMA_PAGAMENTO);
CREATE VIEW vista_pagamentos AS SELECT ID_VENDA, DATA_PAGAMENTO, VALOR_PAGAMENTO FROM PAGAMENTOS;
ALTER TABLE PAGAMENTOS ADD status VARCHAR(50);
ALTER TABLE PAGAMENTOS MODIFY COLUMN status VARCHAR(70);
ALTER TABLE PAGAMENTOS CHANGE COLUMN status status_completo VARCHAR(70);
ALTER TABLE PAGAMENTOS ADD INDEX idx_status (status_completo);
DROP INDEX idx_status ON PAGAMENTOS;
DROP VIEW vista_pagamentos;
TRUNCATE TABLE PAGAMENTOS;
RENAME TABLE PAGAMENTOS TO PAGAMENTOS_ANTIGOS;
RENAME TABLE PAGAMENTOS_ANTIGOS TO PAGAMENTOS;
ALTER TABLE PAGAMENTOS COMMENT = 'Tabela de pagamentos';
ALTER TABLE PAGAMENTOS MODIFY status_completo VARCHAR(70) COMMENT 'Status do pagamento';
ALTER TABLE PAGAMENTOS DROP COLUMN status_completo;

-- Tabela PRODUTOS_VENDAS
CREATE TABLE IF NOT EXISTS PRODUTOS_VENDAS(
    ID_PRODUTO INT,
    ID_VENDA INT,
    QNTDPRODUTO_VENDA INT NOT NULL,
    PRIMARY KEY(ID_PRODUTO, ID_VENDA),
    CONSTRAINT FK_ID_PRODUTO FOREIGN KEY(ID_PRODUTO) REFERENCES PRODUTOS(ID_PRODUTO),
    CONSTRAINT FK_ID_VENDA2 FOREIGN KEY(ID_VENDA) REFERENCES VENDAS(ID_VENDA)
);

-- Comandos DDL PRODUTOS_VENDAS
CREATE INDEX idx_id_produto ON PRODUTOS_VENDAS (ID_PRODUTO);
CREATE VIEW vista_produtos_vendas AS SELECT ID_PRODUTO, ID_VENDA, QNTDPRODUTO_VENDA FROM PRODUTOS_VENDAS;
ALTER TABLE PRODUTOS_VENDAS ADD status VARCHAR(50);
ALTER TABLE PRODUTOS_VENDAS MODIFY COLUMN status VARCHAR(70);
ALTER TABLE PRODUTOS_VENDAS CHANGE COLUMN status status_completo VARCHAR(70);
ALTER TABLE PRODUTOS_VENDAS ADD INDEX idx_status (status_completo);
DROP INDEX idx_status ON PRODUTOS_VENDAS;
DROP VIEW vista_produtos_vendas;
TRUNCATE TABLE PRODUTOS_VENDAS;
RENAME TABLE PRODUTOS_VENDAS TO PRODUTOS_VENDAS_ANTIGOS;
RENAME TABLE PRODUTOS_VENDAS_ANTIGOS TO PRODUTOS_VENDAS;
ALTER TABLE PRODUTOS_VENDAS COMMENT = 'Tabela de produtos em vendas';
ALTER TABLE PRODUTOS_VENDAS MODIFY status_completo VARCHAR(70) COMMENT 'Status do produto na venda';
ALTER TABLE PRODUTOS_VENDAS DROP COLUMN status_completo;

-- Tabela PRODUTOS_FORNECEDORES
CREATE TABLE IF NOT EXISTS PRODUTOS_FORNECEDORES(
    ID_PRODUTO INT,
    ID_FORNECEDOR INT,
    PRIMARY KEY(ID_PRODUTO, ID_FORNECEDOR),
    CONSTRAINT FK_ID_PRODUTO2 FOREIGN KEY(ID_PRODUTO) REFERENCES PRODUTOS(ID_PRODUTO),
    CONSTRAINT FK_ID_FORNECEDOR FOREIGN KEY(ID_FORNECEDOR) REFERENCES FORNECEDORES(ID_FORNECEDOR)
);

-- Comandos DDL PRODUTOS_FORNECEDORES
CREATE INDEX idx_id_fornecedor ON PRODUTOS_FORNECEDORES (ID_FORNECEDOR);
CREATE VIEW vista_produtos_fornecedores AS SELECT ID_PRODUTO, ID_FORNECEDOR FROM PRODUTOS_FORNECEDORES;
ALTER TABLE PRODUTOS_FORNECEDORES ADD status VARCHAR(50);
ALTER TABLE PRODUTOS_FORNECEDORES MODIFY COLUMN status VARCHAR(70);
ALTER TABLE PRODUTOS_FORNECEDORES CHANGE COLUMN status status_completo VARCHAR(70);
ALTER TABLE PRODUTOS_FORNECEDORES ADD INDEX idx_status (status_completo);
DROP INDEX idx_status ON PRODUTOS_FORNECEDORES;
DROP VIEW vista_produtos_fornecedores;
TRUNCATE TABLE PRODUTOS_FORNECEDORES;
RENAME TABLE PRODUTOS_FORNECEDORES TO PRODUTOS_FORNECEDORES_ANTIGOS;
RENAME TABLE PRODUTOS_FORNECEDORES_ANTIGOS TO PRODUTOS_FORNECEDORES;
ALTER TABLE PRODUTOS_FORNECEDORES COMMENT = 'Tabela de produtos e fornecedores';
ALTER TABLE PRODUTOS_FORNECEDORES MODIFY status_completo VARCHAR(70) COMMENT 'Status do produto para o fornecedor';
ALTER TABLE PRODUTOS_FORNECEDORES DROP COLUMN status_completo;

-- Excluindo tabelas na ordem contrária à criação

-- Tabela PRODUTOS_FORNECEDORES
DROP TABLE IF EXISTS PRODUTOS_FORNECEDORES;

-- Tabela PRODUTOS_VENDAS
DROP TABLE IF EXISTS PRODUTOS_VENDAS;

-- Tabela PAGAMENTOS
DROP TABLE IF EXISTS PAGAMENTOS;

-- Tabela VENDAS
DROP TABLE IF EXISTS VENDAS;

-- Tabela FORNECEDORES
DROP TABLE IF EXISTS FORNECEDORES;

-- Tabela PRODUTOS
DROP TABLE IF EXISTS PRODUTOS;

-- Tabela CLIENTES
DROP TABLE IF EXISTS CLIENTES;

-- Excluindo o esquema INOVATECH
DROP SCHEMA IF EXISTS INOVATECH;
